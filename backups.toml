[[deployment]]
name = "backup-databases"
tags = ["backup"]
[deployment.config]
server = "mediaboxlite"
image.type = "Image"
image.params.image = "ghcr.io/realorangeone/db-auto-backup:latest"
image_registry_account = "b-"
network = "none"
volumes = """
/var/run/docker.sock:/var/run/docker.sock:ro
/etc/komodo/backups:/var/backups
"""
environment = """
  # VARIABLE = value
SCHEDULE=
INCLUDE_LOGS=true
"""

##

[[action]]
name = "backup-all-servers"
tags = ["backup"]
[action.config]
file_contents = """
//import { komodo } from "npm:komodo_client";
/*// Run actions using the pre initialized 'komodo' client.
const version: Types.GetVersionResponse = await komodo.read('GetVersion', {});
console.log('ðŸ¦Ž Komodo version:', version.version, 'ðŸ¦Ž\n');
const BRANCH = "1.17.0";
const VERSION = "1.17.0";
const TAG = "dev-7";

*/
const deployment_name = "backup-databases";
const tags_match = [];
const servers = await komodo.read("ListServers", {
  query: { tags: tags_match },
});

var deployment = await komodo.read("GetDeployment", {
  deployment: deployment_name,
});

// check if the deployment is running
async function is_running(deployment: Types.Deployment) {
  const res = await komodo.read("GetDeploymentContainer", {
    deployment: deployment.name,
  });
  return res.state === Types.DeploymentState.Running;
}

// set the deployment server for deployment to server
async function set_deployment_server(deployment: Types.Deployment, server: Types.ServerListItem) {
  const res = await komodo.write("UpdateDeployment", {
    id: deployment.name,
    config: {
      server_id: server.id,
    },
  });
  return res;
}

function sleep(ms: number) {
  return new Promise(resolve => setTimeout(resolve, ms));
}

async function execute_and_wait(deployment: Types.Deployment) {
  console.log(`Running deployment: ${deployment.name}`);
  const res = await komodo.execute_and_poll("Deploy", { deployment: deployment.name });

  const checkIntervalMs = 10 * 1000; // 10 seconds
  let isRunning = true;

  while (isRunning) {
    await sleep(checkIntervalMs);

    // Refresh deployment state
    const containerState = await komodo.read("GetDeploymentContainer", {
      deployment: deployment.name,
    });

    isRunning = containerState.state === Types.DeploymentState.Running;

    console.log(`Deployment running: ${isRunning}`);
  }

  console.log(`Deployment ${deployment.name} completed.`);
}


for (const server of servers) {
  console.log(`Deploying ${deployment_name} to: ${server.name}`);
  await set_deployment_server(deployment, server);
  await execute_and_wait(deployment);
  var deploymentLogResponse = await komodo.read("GetDeploymentLog", {
    deployment: deployment.name,
    tail: 100,
    timestamps: true,
  });
  console.log(deploymentLogResponse.stdout, deploymentLogResponse.stderr);
}
"""

##

[[resource_sync]]
name = "backups"
tags = ["backup"]
[resource_sync.config]
repo = "b-/komodo-backups"
git_account = "b-"
resource_path = ["backups.toml"]
managed = true
match_tags = ["backup"]